Arrays.sort(strings, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2){
                if(o1.charAt(n) > o2.charAt(n)) {
                    return 50;
                }else if(o1.charAt(n) < o2.charAt(n)){
                    return -50;
                }else if(o1.charAt(n) == o2.charAt(n)) {
                    return o1.compareTo(o2);
                }
                return 0;
            }
        });

Arrays.sort(strings, (o1, o2) -> {
            if(o1.charAt(n) > o2.charAt(n)) {
                return 50;
            }else if(o1.charAt(n) < o2.charAt(n)){
                return -50;
            }else if(o1.charAt(n) == o2.charAt(n)) {
                return o1.compareTo(o2);
            }
            return 0;
        });

Map
        for (Map.Entry<String, String> entry : map.entrySet()) {
        	System.out.println("[key]:" + entry.getKey() + ", [value]:" + entry.getValue());
        }

LocalDate
    LocalDate.of(2016, a, b).getDayOfWeek().toString().substring(0,3);

Queue
    삽입
        add() -> queue에 여유공간없으면 exception 발생
        offer()
    제거
        poll()
        remove()
        clear()